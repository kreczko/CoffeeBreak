// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventCollection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HEP {

namespace {

const ::google::protobuf::Descriptor* FourVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FourVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Jet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Jet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Jet_JetAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Electron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Electron_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Electron_ElectronAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Muon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Muon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MET_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EventCollection_2eproto() {
  protobuf_AddDesc_EventCollection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EventCollection.proto");
  GOOGLE_CHECK(file != NULL);
  FourVector_descriptor_ = file->message_type(0);
  static const int FourVector_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, pz_),
  };
  FourVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FourVector_descriptor_,
      FourVector::default_instance_,
      FourVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FourVector));
  Particle_descriptor_ = file->message_type(1);
  static const int Particle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, fourvector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, mass_),
  };
  Particle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particle_descriptor_,
      Particle::default_instance_,
      Particle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particle));
  Jet_descriptor_ = file->message_type(2);
  static const int Jet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, electromagneticfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, numberofrechitscontaining90percentofthejetenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, fractionofenergyinthehottesthpdreadout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, numberofdaughters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedemenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralhadronenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralemenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedhadronenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedmultiplicity_),
  };
  Jet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Jet_descriptor_,
      Jet::default_instance_,
      Jet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Jet));
  Jet_JetAlgorithm_descriptor_ = Jet_descriptor_->enum_type(0);
  Electron_descriptor_ = file->message_type(3);
  static const int Electron_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, supercluser_eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, ecal_isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hcal_isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, tracker_isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, innerlayermissinghits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, sigma_ietaieta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, dphi_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, deta_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hadoverem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, cicelectronidcompressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, sharedfractioninnerhits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, zdistancetoprimaryvertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, dcotthetatonexttrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, disttonexttrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfgamma_isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfchargedhadron_isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfneutralhadron_isolation_),
  };
  Electron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Electron_descriptor_,
      Electron::default_instance_,
      Electron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Electron));
  Electron_ElectronAlgorithm_descriptor_ = Electron_descriptor_->enum_type(0);
  Muon_descriptor_ = file->message_type(4);
  static const int Muon_offsets_[1] = {
  };
  Muon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Muon_descriptor_,
      Muon::default_instance_,
      Muon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Muon));
  MET_descriptor_ = file->message_type(5);
  static const int MET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, basic_),
  };
  MET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MET_descriptor_,
      MET::default_instance_,
      MET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MET));
  Vertex_descriptor_ = file->message_type(6);
  static const int Vertex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, is_fake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, degreesoffreedom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, z_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, rho_),
  };
  Vertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vertex_descriptor_,
      Vertex::default_instance_,
      Vertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vertex));
  Event_descriptor_ = file->message_type(7);
  static const int Event_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, lumi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, jets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, electrons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, met_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, vertices_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  EventCollection_descriptor_ = file->message_type(8);
  static const int EventCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, event_),
  };
  EventCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventCollection_descriptor_,
      EventCollection::default_instance_,
      EventCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EventCollection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FourVector_descriptor_, &FourVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particle_descriptor_, &Particle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Jet_descriptor_, &Jet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Electron_descriptor_, &Electron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Muon_descriptor_, &Muon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MET_descriptor_, &MET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vertex_descriptor_, &Vertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventCollection_descriptor_, &EventCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EventCollection_2eproto() {
  delete FourVector::default_instance_;
  delete FourVector_reflection_;
  delete Particle::default_instance_;
  delete Particle_reflection_;
  delete Jet::default_instance_;
  delete Jet_reflection_;
  delete Electron::default_instance_;
  delete Electron_reflection_;
  delete Muon::default_instance_;
  delete Muon_reflection_;
  delete MET::default_instance_;
  delete MET_reflection_;
  delete Vertex::default_instance_;
  delete Vertex_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete EventCollection::default_instance_;
  delete EventCollection_reflection_;
}

void protobuf_AddDesc_EventCollection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EventCollection.proto\022\003HEP\"@\n\nFourVect"
    "or\022\016\n\006energy\030\001 \002(\001\022\n\n\002px\030\002 \002(\001\022\n\n\002py\030\003 \002"
    "(\001\022\n\n\002pz\030\004 \002(\001\"M\n\010Particle\022#\n\nfourVector"
    "\030\001 \002(\0132\017.HEP.FourVector\022\016\n\006charge\030\002 \002(\001\022"
    "\014\n\004mass\030\003 \002(\001\"\372\003\n\003Jet\022\034\n\005basic\030\001 \002(\0132\r.H"
    "EP.Particle\022+\n\004type\030\002 \001(\0162\025.HEP.Jet.JetA"
    "lgorithm:\006PF2PAT\022\"\n\027electromagneticFract"
    "ion\030\003 \001(\001:\0010\022;\n0numberOfRecHitsContainin"
    "g90PercentOfTheJetEnergy\030\004 \001(\001:\0010\0221\n&fra"
    "ctionOfEnergyIntheHottestHPDReadout\030\005 \001("
    "\001:\0010\022\034\n\021numberOfDaughters\030\006 \001(\r:\0010\022\"\n\027ch"
    "argedEmEnergyFraction\030\007 \001(\001:\0011\022&\n\033neutra"
    "lHadronEnergyFraction\030\010 \001(\001:\0011\022\"\n\027neutra"
    "lEmEnergyFraction\030\t \001(\001:\0011\022&\n\033chargedHad"
    "ronEnergyFraction\030\n \001(\001:\0011\022\036\n\023chargedMul"
    "tiplicity\030\013 \001(\r:\0010\">\n\014JetAlgorithm\022\026\n\022Ca"
    "lo_AntiKT_Cone05\020\000\022\n\n\006CA08PF\020\001\022\n\n\006PF2PAT"
    "\020\002\"\342\004\n\010Electron\022\034\n\005basic\030\001 \002(\0132\r.HEP.Par"
    "ticle\022;\n\004type\030\002 \001(\0162\037.HEP.Electron.Elect"
    "ronAlgorithm:\014ParticleFlow\022\027\n\017superCluse"
    "r_Eta\030\003 \002(\001\022\026\n\016ecal_Isolation\030\004 \001(\001\022\026\n\016h"
    "cal_Isolation\030\005 \001(\001\022\031\n\021tracker_Isolation"
    "\030\006 \001(\001\022\035\n\025innerLayerMissingHits\030\007 \001(\001\022\026\n"
    "\016sigma_IEtaIEta\030\010 \001(\001\022\017\n\007dPhi_In\030\t \001(\001\022\017"
    "\n\007dEta_In\030\n \001(\001\022\021\n\thadOverEm\030\013 \001(\001\022\037\n\027Ci"
    "CElectronIDCompressed\030\014 \001(\r\022\037\n\027sharedFra"
    "ctionInnerHits\030\r \001(\001\022 \n\030zDistanceToPrima"
    "ryVertex\030\016 \001(\001\022\034\n\024dCotThetaToNextTrack\030\017"
    " \001(\001\022\027\n\017distToNextTrack\030\020 \001(\001\022\031\n\021PFGamma"
    "_Isolation\030\021 \001(\001\022!\n\031PFChargedHadron_Isol"
    "ation\030\022 \001(\001\022!\n\031PFNeutralHadron_Isolation"
    "\030\023 \001(\001\"/\n\021ElectronAlgorithm\022\010\n\004Calo\020\000\022\020\n"
    "\014ParticleFlow\020\001\"\006\n\004Muon\"#\n\003MET\022\034\n\005basic\030"
    "\001 \002(\0132\r.HEP.Particle\"T\n\006Vertex\022\017\n\007is_fak"
    "e\030\001 \002(\010\022\030\n\020degreesOfFreedom\030\002 \002(\r\022\022\n\nz_p"
    "osition\030\003 \002(\001\022\013\n\003rho\030\004 \002(\001\"\242\001\n\005Event\022\013\n\003"
    "run\030\001 \002(\r\022\014\n\004lumi\030\002 \002(\r\022\016\n\006number\030\003 \001(\r\022"
    "\026\n\004jets\030\004 \003(\0132\010.HEP.Jet\022 \n\telectrons\030\005 \003"
    "(\0132\r.HEP.Electron\022\025\n\003met\030\006 \002(\0132\010.HEP.MET"
    "\022\035\n\010vertices\030\007 \003(\0132\013.HEP.Vertex\",\n\017Event"
    "Collection\022\031\n\005event\030\001 \003(\0132\n.HEP.Event", 1637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EventCollection.proto", &protobuf_RegisterTypes);
  FourVector::default_instance_ = new FourVector();
  Particle::default_instance_ = new Particle();
  Jet::default_instance_ = new Jet();
  Electron::default_instance_ = new Electron();
  Muon::default_instance_ = new Muon();
  MET::default_instance_ = new MET();
  Vertex::default_instance_ = new Vertex();
  Event::default_instance_ = new Event();
  EventCollection::default_instance_ = new EventCollection();
  FourVector::default_instance_->InitAsDefaultInstance();
  Particle::default_instance_->InitAsDefaultInstance();
  Jet::default_instance_->InitAsDefaultInstance();
  Electron::default_instance_->InitAsDefaultInstance();
  Muon::default_instance_->InitAsDefaultInstance();
  MET::default_instance_->InitAsDefaultInstance();
  Vertex::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  EventCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EventCollection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EventCollection_2eproto {
  StaticDescriptorInitializer_EventCollection_2eproto() {
    protobuf_AddDesc_EventCollection_2eproto();
  }
} static_descriptor_initializer_EventCollection_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FourVector::kEnergyFieldNumber;
const int FourVector::kPxFieldNumber;
const int FourVector::kPyFieldNumber;
const int FourVector::kPzFieldNumber;
#endif  // !_MSC_VER

FourVector::FourVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FourVector::InitAsDefaultInstance() {
}

FourVector::FourVector(const FourVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FourVector::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FourVector::~FourVector() {
  SharedDtor();
}

void FourVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FourVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FourVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FourVector_descriptor_;
}

const FourVector& FourVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

FourVector* FourVector::default_instance_ = NULL;

FourVector* FourVector::New() const {
  return new FourVector;
}

void FourVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FourVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double energy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_px;
        break;
      }
      
      // required double px = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_py;
        break;
      }
      
      // required double py = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_pz;
        break;
      }
      
      // required double pz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FourVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double energy = 1;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // required double px = 2;
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // required double py = 3;
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // required double pz = 4;
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FourVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double energy = 1;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // required double px = 2;
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // required double py = 3;
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // required double pz = 4;
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FourVector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double energy = 1;
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // required double px = 2;
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // required double py = 3;
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // required double pz = 4;
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FourVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FourVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FourVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FourVector::MergeFrom(const FourVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FourVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FourVector::CopyFrom(const FourVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void FourVector::Swap(FourVector* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FourVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FourVector_descriptor_;
  metadata.reflection = FourVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Particle::kFourVectorFieldNumber;
const int Particle::kChargeFieldNumber;
const int Particle::kMassFieldNumber;
#endif  // !_MSC_VER

Particle::Particle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particle::InitAsDefaultInstance() {
  fourvector_ = const_cast< ::HEP::FourVector*>(&::HEP::FourVector::default_instance());
}

Particle::Particle(const Particle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particle::SharedCtor() {
  _cached_size_ = 0;
  fourvector_ = NULL;
  charge_ = 0;
  mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particle::~Particle() {
  SharedDtor();
}

void Particle::SharedDtor() {
  if (this != default_instance_) {
    delete fourvector_;
  }
}

void Particle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_descriptor_;
}

const Particle& Particle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Particle* Particle::default_instance_ = NULL;

Particle* Particle::New() const {
  return new Particle;
}

void Particle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fourvector()) {
      if (fourvector_ != NULL) fourvector_->::HEP::FourVector::Clear();
    }
    charge_ = 0;
    mass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HEP.FourVector fourVector = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fourvector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_charge;
        break;
      }
      
      // required double charge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mass;
        break;
      }
      
      // required double mass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HEP.FourVector fourVector = 1;
  if (has_fourvector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fourvector(), output);
  }
  
  // required double charge = 2;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->charge(), output);
  }
  
  // required double mass = 3;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HEP.FourVector fourVector = 1;
  if (has_fourvector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fourvector(), target);
  }
  
  // required double charge = 2;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->charge(), target);
  }
  
  // required double mass = 3;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HEP.FourVector fourVector = 1;
    if (has_fourvector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fourvector());
    }
    
    // required double charge = 2;
    if (has_charge()) {
      total_size += 1 + 8;
    }
    
    // required double mass = 3;
    if (has_mass()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particle::MergeFrom(const Particle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fourvector()) {
      mutable_fourvector()->::HEP::FourVector::MergeFrom(from.fourvector());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particle::CopyFrom(const Particle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_fourvector()) {
    if (!this->fourvector().IsInitialized()) return false;
  }
  return true;
}

void Particle::Swap(Particle* other) {
  if (other != this) {
    std::swap(fourvector_, other->fourvector_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particle_descriptor_;
  metadata.reflection = Particle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Jet_JetAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Jet_JetAlgorithm_descriptor_;
}
bool Jet_JetAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Jet_JetAlgorithm Jet::Calo_AntiKT_Cone05;
const Jet_JetAlgorithm Jet::CA08PF;
const Jet_JetAlgorithm Jet::PF2PAT;
const Jet_JetAlgorithm Jet::JetAlgorithm_MIN;
const Jet_JetAlgorithm Jet::JetAlgorithm_MAX;
const int Jet::JetAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Jet::kBasicFieldNumber;
const int Jet::kTypeFieldNumber;
const int Jet::kElectromagneticFractionFieldNumber;
const int Jet::kNumberOfRecHitsContaining90PercentOfTheJetEnergyFieldNumber;
const int Jet::kFractionOfEnergyIntheHottestHPDReadoutFieldNumber;
const int Jet::kNumberOfDaughtersFieldNumber;
const int Jet::kChargedEmEnergyFractionFieldNumber;
const int Jet::kNeutralHadronEnergyFractionFieldNumber;
const int Jet::kNeutralEmEnergyFractionFieldNumber;
const int Jet::kChargedHadronEnergyFractionFieldNumber;
const int Jet::kChargedMultiplicityFieldNumber;
#endif  // !_MSC_VER

Jet::Jet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Jet::InitAsDefaultInstance() {
  basic_ = const_cast< ::HEP::Particle*>(&::HEP::Particle::default_instance());
}

Jet::Jet(const Jet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Jet::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  type_ = 2;
  electromagneticfraction_ = 0;
  numberofrechitscontaining90percentofthejetenergy_ = 0;
  fractionofenergyinthehottesthpdreadout_ = 0;
  numberofdaughters_ = 0u;
  chargedemenergyfraction_ = 1;
  neutralhadronenergyfraction_ = 1;
  neutralemenergyfraction_ = 1;
  chargedhadronenergyfraction_ = 1;
  chargedmultiplicity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Jet::~Jet() {
  SharedDtor();
}

void Jet::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void Jet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Jet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Jet_descriptor_;
}

const Jet& Jet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Jet* Jet::default_instance_ = NULL;

Jet* Jet::New() const {
  return new Jet;
}

void Jet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::HEP::Particle::Clear();
    }
    type_ = 2;
    electromagneticfraction_ = 0;
    numberofrechitscontaining90percentofthejetenergy_ = 0;
    fractionofenergyinthehottesthpdreadout_ = 0;
    numberofdaughters_ = 0u;
    chargedemenergyfraction_ = 1;
    neutralhadronenergyfraction_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    neutralemenergyfraction_ = 1;
    chargedhadronenergyfraction_ = 1;
    chargedmultiplicity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Jet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HEP.Particle basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .HEP.Jet.JetAlgorithm type = 2 [default = PF2PAT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::Jet_JetAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::Jet_JetAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_electromagneticFraction;
        break;
      }
      
      // optional double electromagneticFraction = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_electromagneticFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &electromagneticfraction_)));
          set_has_electromagneticfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_numberOfRecHitsContaining90PercentOfTheJetEnergy;
        break;
      }
      
      // optional double numberOfRecHitsContaining90PercentOfTheJetEnergy = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_numberOfRecHitsContaining90PercentOfTheJetEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numberofrechitscontaining90percentofthejetenergy_)));
          set_has_numberofrechitscontaining90percentofthejetenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_fractionOfEnergyIntheHottestHPDReadout;
        break;
      }
      
      // optional double fractionOfEnergyIntheHottestHPDReadout = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fractionOfEnergyIntheHottestHPDReadout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fractionofenergyinthehottesthpdreadout_)));
          set_has_fractionofenergyinthehottesthpdreadout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numberOfDaughters;
        break;
      }
      
      // optional uint32 numberOfDaughters = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfDaughters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofdaughters_)));
          set_has_numberofdaughters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_chargedEmEnergyFraction;
        break;
      }
      
      // optional double chargedEmEnergyFraction = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chargedEmEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedemenergyfraction_)));
          set_has_chargedemenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_neutralHadronEnergyFraction;
        break;
      }
      
      // optional double neutralHadronEnergyFraction = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_neutralHadronEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralhadronenergyfraction_)));
          set_has_neutralhadronenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_neutralEmEnergyFraction;
        break;
      }
      
      // optional double neutralEmEnergyFraction = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_neutralEmEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralemenergyfraction_)));
          set_has_neutralemenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_chargedHadronEnergyFraction;
        break;
      }
      
      // optional double chargedHadronEnergyFraction = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chargedHadronEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedhadronenergyfraction_)));
          set_has_chargedhadronenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chargedMultiplicity;
        break;
      }
      
      // optional uint32 chargedMultiplicity = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chargedMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chargedmultiplicity_)));
          set_has_chargedmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Jet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }
  
  // optional .HEP.Jet.JetAlgorithm type = 2 [default = PF2PAT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional double electromagneticFraction = 3 [default = 0];
  if (has_electromagneticfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->electromagneticfraction(), output);
  }
  
  // optional double numberOfRecHitsContaining90PercentOfTheJetEnergy = 4 [default = 0];
  if (has_numberofrechitscontaining90percentofthejetenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->numberofrechitscontaining90percentofthejetenergy(), output);
  }
  
  // optional double fractionOfEnergyIntheHottestHPDReadout = 5 [default = 0];
  if (has_fractionofenergyinthehottesthpdreadout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fractionofenergyinthehottesthpdreadout(), output);
  }
  
  // optional uint32 numberOfDaughters = 6 [default = 0];
  if (has_numberofdaughters()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numberofdaughters(), output);
  }
  
  // optional double chargedEmEnergyFraction = 7 [default = 1];
  if (has_chargedemenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->chargedemenergyfraction(), output);
  }
  
  // optional double neutralHadronEnergyFraction = 8 [default = 1];
  if (has_neutralhadronenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->neutralhadronenergyfraction(), output);
  }
  
  // optional double neutralEmEnergyFraction = 9 [default = 1];
  if (has_neutralemenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->neutralemenergyfraction(), output);
  }
  
  // optional double chargedHadronEnergyFraction = 10 [default = 1];
  if (has_chargedhadronenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->chargedhadronenergyfraction(), output);
  }
  
  // optional uint32 chargedMultiplicity = 11 [default = 0];
  if (has_chargedmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->chargedmultiplicity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Jet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }
  
  // optional .HEP.Jet.JetAlgorithm type = 2 [default = PF2PAT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional double electromagneticFraction = 3 [default = 0];
  if (has_electromagneticfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->electromagneticfraction(), target);
  }
  
  // optional double numberOfRecHitsContaining90PercentOfTheJetEnergy = 4 [default = 0];
  if (has_numberofrechitscontaining90percentofthejetenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->numberofrechitscontaining90percentofthejetenergy(), target);
  }
  
  // optional double fractionOfEnergyIntheHottestHPDReadout = 5 [default = 0];
  if (has_fractionofenergyinthehottesthpdreadout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fractionofenergyinthehottesthpdreadout(), target);
  }
  
  // optional uint32 numberOfDaughters = 6 [default = 0];
  if (has_numberofdaughters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->numberofdaughters(), target);
  }
  
  // optional double chargedEmEnergyFraction = 7 [default = 1];
  if (has_chargedemenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->chargedemenergyfraction(), target);
  }
  
  // optional double neutralHadronEnergyFraction = 8 [default = 1];
  if (has_neutralhadronenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->neutralhadronenergyfraction(), target);
  }
  
  // optional double neutralEmEnergyFraction = 9 [default = 1];
  if (has_neutralemenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->neutralemenergyfraction(), target);
  }
  
  // optional double chargedHadronEnergyFraction = 10 [default = 1];
  if (has_chargedhadronenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->chargedhadronenergyfraction(), target);
  }
  
  // optional uint32 chargedMultiplicity = 11 [default = 0];
  if (has_chargedmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->chargedmultiplicity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Jet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HEP.Particle basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }
    
    // optional .HEP.Jet.JetAlgorithm type = 2 [default = PF2PAT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double electromagneticFraction = 3 [default = 0];
    if (has_electromagneticfraction()) {
      total_size += 1 + 8;
    }
    
    // optional double numberOfRecHitsContaining90PercentOfTheJetEnergy = 4 [default = 0];
    if (has_numberofrechitscontaining90percentofthejetenergy()) {
      total_size += 1 + 8;
    }
    
    // optional double fractionOfEnergyIntheHottestHPDReadout = 5 [default = 0];
    if (has_fractionofenergyinthehottesthpdreadout()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 numberOfDaughters = 6 [default = 0];
    if (has_numberofdaughters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberofdaughters());
    }
    
    // optional double chargedEmEnergyFraction = 7 [default = 1];
    if (has_chargedemenergyfraction()) {
      total_size += 1 + 8;
    }
    
    // optional double neutralHadronEnergyFraction = 8 [default = 1];
    if (has_neutralhadronenergyfraction()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double neutralEmEnergyFraction = 9 [default = 1];
    if (has_neutralemenergyfraction()) {
      total_size += 1 + 8;
    }
    
    // optional double chargedHadronEnergyFraction = 10 [default = 1];
    if (has_chargedhadronenergyfraction()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 chargedMultiplicity = 11 [default = 0];
    if (has_chargedmultiplicity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chargedmultiplicity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Jet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Jet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Jet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Jet::MergeFrom(const Jet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::HEP::Particle::MergeFrom(from.basic());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_electromagneticfraction()) {
      set_electromagneticfraction(from.electromagneticfraction());
    }
    if (from.has_numberofrechitscontaining90percentofthejetenergy()) {
      set_numberofrechitscontaining90percentofthejetenergy(from.numberofrechitscontaining90percentofthejetenergy());
    }
    if (from.has_fractionofenergyinthehottesthpdreadout()) {
      set_fractionofenergyinthehottesthpdreadout(from.fractionofenergyinthehottesthpdreadout());
    }
    if (from.has_numberofdaughters()) {
      set_numberofdaughters(from.numberofdaughters());
    }
    if (from.has_chargedemenergyfraction()) {
      set_chargedemenergyfraction(from.chargedemenergyfraction());
    }
    if (from.has_neutralhadronenergyfraction()) {
      set_neutralhadronenergyfraction(from.neutralhadronenergyfraction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_neutralemenergyfraction()) {
      set_neutralemenergyfraction(from.neutralemenergyfraction());
    }
    if (from.has_chargedhadronenergyfraction()) {
      set_chargedhadronenergyfraction(from.chargedhadronenergyfraction());
    }
    if (from.has_chargedmultiplicity()) {
      set_chargedmultiplicity(from.chargedmultiplicity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Jet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jet::CopyFrom(const Jet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void Jet::Swap(Jet* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(type_, other->type_);
    std::swap(electromagneticfraction_, other->electromagneticfraction_);
    std::swap(numberofrechitscontaining90percentofthejetenergy_, other->numberofrechitscontaining90percentofthejetenergy_);
    std::swap(fractionofenergyinthehottesthpdreadout_, other->fractionofenergyinthehottesthpdreadout_);
    std::swap(numberofdaughters_, other->numberofdaughters_);
    std::swap(chargedemenergyfraction_, other->chargedemenergyfraction_);
    std::swap(neutralhadronenergyfraction_, other->neutralhadronenergyfraction_);
    std::swap(neutralemenergyfraction_, other->neutralemenergyfraction_);
    std::swap(chargedhadronenergyfraction_, other->chargedhadronenergyfraction_);
    std::swap(chargedmultiplicity_, other->chargedmultiplicity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Jet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Jet_descriptor_;
  metadata.reflection = Jet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Electron_ElectronAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electron_ElectronAlgorithm_descriptor_;
}
bool Electron_ElectronAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Electron_ElectronAlgorithm Electron::Calo;
const Electron_ElectronAlgorithm Electron::ParticleFlow;
const Electron_ElectronAlgorithm Electron::ElectronAlgorithm_MIN;
const Electron_ElectronAlgorithm Electron::ElectronAlgorithm_MAX;
const int Electron::ElectronAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Electron::kBasicFieldNumber;
const int Electron::kTypeFieldNumber;
const int Electron::kSuperCluserEtaFieldNumber;
const int Electron::kEcalIsolationFieldNumber;
const int Electron::kHcalIsolationFieldNumber;
const int Electron::kTrackerIsolationFieldNumber;
const int Electron::kInnerLayerMissingHitsFieldNumber;
const int Electron::kSigmaIEtaIEtaFieldNumber;
const int Electron::kDPhiInFieldNumber;
const int Electron::kDEtaInFieldNumber;
const int Electron::kHadOverEmFieldNumber;
const int Electron::kCiCElectronIDCompressedFieldNumber;
const int Electron::kSharedFractionInnerHitsFieldNumber;
const int Electron::kZDistanceToPrimaryVertexFieldNumber;
const int Electron::kDCotThetaToNextTrackFieldNumber;
const int Electron::kDistToNextTrackFieldNumber;
const int Electron::kPFGammaIsolationFieldNumber;
const int Electron::kPFChargedHadronIsolationFieldNumber;
const int Electron::kPFNeutralHadronIsolationFieldNumber;
#endif  // !_MSC_VER

Electron::Electron()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Electron::InitAsDefaultInstance() {
  basic_ = const_cast< ::HEP::Particle*>(&::HEP::Particle::default_instance());
}

Electron::Electron(const Electron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Electron::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  type_ = 1;
  supercluser_eta_ = 0;
  ecal_isolation_ = 0;
  hcal_isolation_ = 0;
  tracker_isolation_ = 0;
  innerlayermissinghits_ = 0;
  sigma_ietaieta_ = 0;
  dphi_in_ = 0;
  deta_in_ = 0;
  hadoverem_ = 0;
  cicelectronidcompressed_ = 0u;
  sharedfractioninnerhits_ = 0;
  zdistancetoprimaryvertex_ = 0;
  dcotthetatonexttrack_ = 0;
  disttonexttrack_ = 0;
  pfgamma_isolation_ = 0;
  pfchargedhadron_isolation_ = 0;
  pfneutralhadron_isolation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Electron::~Electron() {
  SharedDtor();
}

void Electron::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void Electron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Electron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electron_descriptor_;
}

const Electron& Electron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Electron* Electron::default_instance_ = NULL;

Electron* Electron::New() const {
  return new Electron;
}

void Electron::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::HEP::Particle::Clear();
    }
    type_ = 1;
    supercluser_eta_ = 0;
    ecal_isolation_ = 0;
    hcal_isolation_ = 0;
    tracker_isolation_ = 0;
    innerlayermissinghits_ = 0;
    sigma_ietaieta_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dphi_in_ = 0;
    deta_in_ = 0;
    hadoverem_ = 0;
    cicelectronidcompressed_ = 0u;
    sharedfractioninnerhits_ = 0;
    zdistancetoprimaryvertex_ = 0;
    dcotthetatonexttrack_ = 0;
    disttonexttrack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pfgamma_isolation_ = 0;
    pfchargedhadron_isolation_ = 0;
    pfneutralhadron_isolation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Electron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HEP.Particle basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .HEP.Electron.ElectronAlgorithm type = 2 [default = ParticleFlow];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::Electron_ElectronAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::Electron_ElectronAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_superCluser_Eta;
        break;
      }
      
      // required double superCluser_Eta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_superCluser_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &supercluser_eta_)));
          set_has_supercluser_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ecal_Isolation;
        break;
      }
      
      // optional double ecal_Isolation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ecal_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecal_isolation_)));
          set_has_ecal_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_hcal_Isolation;
        break;
      }
      
      // optional double hcal_Isolation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hcal_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcal_isolation_)));
          set_has_hcal_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_tracker_Isolation;
        break;
      }
      
      // optional double tracker_Isolation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tracker_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracker_isolation_)));
          set_has_tracker_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_innerLayerMissingHits;
        break;
      }
      
      // optional double innerLayerMissingHits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_innerLayerMissingHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &innerlayermissinghits_)));
          set_has_innerlayermissinghits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_sigma_IEtaIEta;
        break;
      }
      
      // optional double sigma_IEtaIEta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sigma_IEtaIEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_ietaieta_)));
          set_has_sigma_ietaieta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_dPhi_In;
        break;
      }
      
      // optional double dPhi_In = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dPhi_In:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dphi_in_)));
          set_has_dphi_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_dEta_In;
        break;
      }
      
      // optional double dEta_In = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dEta_In:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deta_in_)));
          set_has_deta_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_hadOverEm;
        break;
      }
      
      // optional double hadOverEm = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hadOverEm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hadoverem_)));
          set_has_hadoverem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CiCElectronIDCompressed;
        break;
      }
      
      // optional uint32 CiCElectronIDCompressed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CiCElectronIDCompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cicelectronidcompressed_)));
          set_has_cicelectronidcompressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_sharedFractionInnerHits;
        break;
      }
      
      // optional double sharedFractionInnerHits = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sharedFractionInnerHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharedfractioninnerhits_)));
          set_has_sharedfractioninnerhits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_zDistanceToPrimaryVertex;
        break;
      }
      
      // optional double zDistanceToPrimaryVertex = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_zDistanceToPrimaryVertex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zdistancetoprimaryvertex_)));
          set_has_zdistancetoprimaryvertex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_dCotThetaToNextTrack;
        break;
      }
      
      // optional double dCotThetaToNextTrack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dCotThetaToNextTrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dcotthetatonexttrack_)));
          set_has_dcotthetatonexttrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_distToNextTrack;
        break;
      }
      
      // optional double distToNextTrack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distToNextTrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &disttonexttrack_)));
          set_has_disttonexttrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_PFGamma_Isolation;
        break;
      }
      
      // optional double PFGamma_Isolation = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PFGamma_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfgamma_isolation_)));
          set_has_pfgamma_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_PFChargedHadron_Isolation;
        break;
      }
      
      // optional double PFChargedHadron_Isolation = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PFChargedHadron_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfchargedhadron_isolation_)));
          set_has_pfchargedhadron_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PFNeutralHadron_Isolation;
        break;
      }
      
      // optional double PFNeutralHadron_Isolation = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PFNeutralHadron_Isolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfneutralhadron_isolation_)));
          set_has_pfneutralhadron_isolation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Electron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }
  
  // optional .HEP.Electron.ElectronAlgorithm type = 2 [default = ParticleFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required double superCluser_Eta = 3;
  if (has_supercluser_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->supercluser_eta(), output);
  }
  
  // optional double ecal_Isolation = 4;
  if (has_ecal_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ecal_isolation(), output);
  }
  
  // optional double hcal_Isolation = 5;
  if (has_hcal_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->hcal_isolation(), output);
  }
  
  // optional double tracker_Isolation = 6;
  if (has_tracker_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tracker_isolation(), output);
  }
  
  // optional double innerLayerMissingHits = 7;
  if (has_innerlayermissinghits()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->innerlayermissinghits(), output);
  }
  
  // optional double sigma_IEtaIEta = 8;
  if (has_sigma_ietaieta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sigma_ietaieta(), output);
  }
  
  // optional double dPhi_In = 9;
  if (has_dphi_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dphi_in(), output);
  }
  
  // optional double dEta_In = 10;
  if (has_deta_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->deta_in(), output);
  }
  
  // optional double hadOverEm = 11;
  if (has_hadoverem()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->hadoverem(), output);
  }
  
  // optional uint32 CiCElectronIDCompressed = 12;
  if (has_cicelectronidcompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cicelectronidcompressed(), output);
  }
  
  // optional double sharedFractionInnerHits = 13;
  if (has_sharedfractioninnerhits()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->sharedfractioninnerhits(), output);
  }
  
  // optional double zDistanceToPrimaryVertex = 14;
  if (has_zdistancetoprimaryvertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zdistancetoprimaryvertex(), output);
  }
  
  // optional double dCotThetaToNextTrack = 15;
  if (has_dcotthetatonexttrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dcotthetatonexttrack(), output);
  }
  
  // optional double distToNextTrack = 16;
  if (has_disttonexttrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->disttonexttrack(), output);
  }
  
  // optional double PFGamma_Isolation = 17;
  if (has_pfgamma_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->pfgamma_isolation(), output);
  }
  
  // optional double PFChargedHadron_Isolation = 18;
  if (has_pfchargedhadron_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->pfchargedhadron_isolation(), output);
  }
  
  // optional double PFNeutralHadron_Isolation = 19;
  if (has_pfneutralhadron_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pfneutralhadron_isolation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Electron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }
  
  // optional .HEP.Electron.ElectronAlgorithm type = 2 [default = ParticleFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required double superCluser_Eta = 3;
  if (has_supercluser_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->supercluser_eta(), target);
  }
  
  // optional double ecal_Isolation = 4;
  if (has_ecal_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ecal_isolation(), target);
  }
  
  // optional double hcal_Isolation = 5;
  if (has_hcal_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->hcal_isolation(), target);
  }
  
  // optional double tracker_Isolation = 6;
  if (has_tracker_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tracker_isolation(), target);
  }
  
  // optional double innerLayerMissingHits = 7;
  if (has_innerlayermissinghits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->innerlayermissinghits(), target);
  }
  
  // optional double sigma_IEtaIEta = 8;
  if (has_sigma_ietaieta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sigma_ietaieta(), target);
  }
  
  // optional double dPhi_In = 9;
  if (has_dphi_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dphi_in(), target);
  }
  
  // optional double dEta_In = 10;
  if (has_deta_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->deta_in(), target);
  }
  
  // optional double hadOverEm = 11;
  if (has_hadoverem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->hadoverem(), target);
  }
  
  // optional uint32 CiCElectronIDCompressed = 12;
  if (has_cicelectronidcompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cicelectronidcompressed(), target);
  }
  
  // optional double sharedFractionInnerHits = 13;
  if (has_sharedfractioninnerhits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->sharedfractioninnerhits(), target);
  }
  
  // optional double zDistanceToPrimaryVertex = 14;
  if (has_zdistancetoprimaryvertex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zdistancetoprimaryvertex(), target);
  }
  
  // optional double dCotThetaToNextTrack = 15;
  if (has_dcotthetatonexttrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dcotthetatonexttrack(), target);
  }
  
  // optional double distToNextTrack = 16;
  if (has_disttonexttrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->disttonexttrack(), target);
  }
  
  // optional double PFGamma_Isolation = 17;
  if (has_pfgamma_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->pfgamma_isolation(), target);
  }
  
  // optional double PFChargedHadron_Isolation = 18;
  if (has_pfchargedhadron_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->pfchargedhadron_isolation(), target);
  }
  
  // optional double PFNeutralHadron_Isolation = 19;
  if (has_pfneutralhadron_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->pfneutralhadron_isolation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Electron::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HEP.Particle basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }
    
    // optional .HEP.Electron.ElectronAlgorithm type = 2 [default = ParticleFlow];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required double superCluser_Eta = 3;
    if (has_supercluser_eta()) {
      total_size += 1 + 8;
    }
    
    // optional double ecal_Isolation = 4;
    if (has_ecal_isolation()) {
      total_size += 1 + 8;
    }
    
    // optional double hcal_Isolation = 5;
    if (has_hcal_isolation()) {
      total_size += 1 + 8;
    }
    
    // optional double tracker_Isolation = 6;
    if (has_tracker_isolation()) {
      total_size += 1 + 8;
    }
    
    // optional double innerLayerMissingHits = 7;
    if (has_innerlayermissinghits()) {
      total_size += 1 + 8;
    }
    
    // optional double sigma_IEtaIEta = 8;
    if (has_sigma_ietaieta()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double dPhi_In = 9;
    if (has_dphi_in()) {
      total_size += 1 + 8;
    }
    
    // optional double dEta_In = 10;
    if (has_deta_in()) {
      total_size += 1 + 8;
    }
    
    // optional double hadOverEm = 11;
    if (has_hadoverem()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 CiCElectronIDCompressed = 12;
    if (has_cicelectronidcompressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cicelectronidcompressed());
    }
    
    // optional double sharedFractionInnerHits = 13;
    if (has_sharedfractioninnerhits()) {
      total_size += 1 + 8;
    }
    
    // optional double zDistanceToPrimaryVertex = 14;
    if (has_zdistancetoprimaryvertex()) {
      total_size += 1 + 8;
    }
    
    // optional double dCotThetaToNextTrack = 15;
    if (has_dcotthetatonexttrack()) {
      total_size += 1 + 8;
    }
    
    // optional double distToNextTrack = 16;
    if (has_disttonexttrack()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double PFGamma_Isolation = 17;
    if (has_pfgamma_isolation()) {
      total_size += 2 + 8;
    }
    
    // optional double PFChargedHadron_Isolation = 18;
    if (has_pfchargedhadron_isolation()) {
      total_size += 2 + 8;
    }
    
    // optional double PFNeutralHadron_Isolation = 19;
    if (has_pfneutralhadron_isolation()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Electron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Electron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Electron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Electron::MergeFrom(const Electron& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::HEP::Particle::MergeFrom(from.basic());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_supercluser_eta()) {
      set_supercluser_eta(from.supercluser_eta());
    }
    if (from.has_ecal_isolation()) {
      set_ecal_isolation(from.ecal_isolation());
    }
    if (from.has_hcal_isolation()) {
      set_hcal_isolation(from.hcal_isolation());
    }
    if (from.has_tracker_isolation()) {
      set_tracker_isolation(from.tracker_isolation());
    }
    if (from.has_innerlayermissinghits()) {
      set_innerlayermissinghits(from.innerlayermissinghits());
    }
    if (from.has_sigma_ietaieta()) {
      set_sigma_ietaieta(from.sigma_ietaieta());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dphi_in()) {
      set_dphi_in(from.dphi_in());
    }
    if (from.has_deta_in()) {
      set_deta_in(from.deta_in());
    }
    if (from.has_hadoverem()) {
      set_hadoverem(from.hadoverem());
    }
    if (from.has_cicelectronidcompressed()) {
      set_cicelectronidcompressed(from.cicelectronidcompressed());
    }
    if (from.has_sharedfractioninnerhits()) {
      set_sharedfractioninnerhits(from.sharedfractioninnerhits());
    }
    if (from.has_zdistancetoprimaryvertex()) {
      set_zdistancetoprimaryvertex(from.zdistancetoprimaryvertex());
    }
    if (from.has_dcotthetatonexttrack()) {
      set_dcotthetatonexttrack(from.dcotthetatonexttrack());
    }
    if (from.has_disttonexttrack()) {
      set_disttonexttrack(from.disttonexttrack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pfgamma_isolation()) {
      set_pfgamma_isolation(from.pfgamma_isolation());
    }
    if (from.has_pfchargedhadron_isolation()) {
      set_pfchargedhadron_isolation(from.pfchargedhadron_isolation());
    }
    if (from.has_pfneutralhadron_isolation()) {
      set_pfneutralhadron_isolation(from.pfneutralhadron_isolation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Electron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electron::CopyFrom(const Electron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void Electron::Swap(Electron* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(type_, other->type_);
    std::swap(supercluser_eta_, other->supercluser_eta_);
    std::swap(ecal_isolation_, other->ecal_isolation_);
    std::swap(hcal_isolation_, other->hcal_isolation_);
    std::swap(tracker_isolation_, other->tracker_isolation_);
    std::swap(innerlayermissinghits_, other->innerlayermissinghits_);
    std::swap(sigma_ietaieta_, other->sigma_ietaieta_);
    std::swap(dphi_in_, other->dphi_in_);
    std::swap(deta_in_, other->deta_in_);
    std::swap(hadoverem_, other->hadoverem_);
    std::swap(cicelectronidcompressed_, other->cicelectronidcompressed_);
    std::swap(sharedfractioninnerhits_, other->sharedfractioninnerhits_);
    std::swap(zdistancetoprimaryvertex_, other->zdistancetoprimaryvertex_);
    std::swap(dcotthetatonexttrack_, other->dcotthetatonexttrack_);
    std::swap(disttonexttrack_, other->disttonexttrack_);
    std::swap(pfgamma_isolation_, other->pfgamma_isolation_);
    std::swap(pfchargedhadron_isolation_, other->pfchargedhadron_isolation_);
    std::swap(pfneutralhadron_isolation_, other->pfneutralhadron_isolation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Electron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Electron_descriptor_;
  metadata.reflection = Electron_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Muon::Muon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Muon::InitAsDefaultInstance() {
}

Muon::Muon(const Muon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Muon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Muon::~Muon() {
  SharedDtor();
}

void Muon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Muon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Muon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Muon_descriptor_;
}

const Muon& Muon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Muon* Muon::default_instance_ = NULL;

Muon* Muon::New() const {
  return new Muon;
}

void Muon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Muon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Muon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Muon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Muon::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Muon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Muon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Muon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Muon::MergeFrom(const Muon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Muon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Muon::CopyFrom(const Muon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Muon::IsInitialized() const {
  
  return true;
}

void Muon::Swap(Muon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Muon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Muon_descriptor_;
  metadata.reflection = Muon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MET::kBasicFieldNumber;
#endif  // !_MSC_VER

MET::MET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MET::InitAsDefaultInstance() {
  basic_ = const_cast< ::HEP::Particle*>(&::HEP::Particle::default_instance());
}

MET::MET(const MET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MET::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MET::~MET() {
  SharedDtor();
}

void MET::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void MET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MET_descriptor_;
}

const MET& MET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

MET* MET::default_instance_ = NULL;

MET* MET::New() const {
  return new MET;
}

void MET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::HEP::Particle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HEP.Particle basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HEP.Particle basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HEP.Particle basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MET::MergeFrom(const MET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::HEP::Particle::MergeFrom(from.basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MET::CopyFrom(const MET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void MET::Swap(MET* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MET_descriptor_;
  metadata.reflection = MET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertex::kIsFakeFieldNumber;
const int Vertex::kDegreesOfFreedomFieldNumber;
const int Vertex::kZPositionFieldNumber;
const int Vertex::kRhoFieldNumber;
#endif  // !_MSC_VER

Vertex::Vertex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vertex::InitAsDefaultInstance() {
}

Vertex::Vertex(const Vertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vertex::SharedCtor() {
  _cached_size_ = 0;
  is_fake_ = false;
  degreesoffreedom_ = 0u;
  z_position_ = 0;
  rho_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertex::~Vertex() {
  SharedDtor();
}

void Vertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex_descriptor_;
}

const Vertex& Vertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Vertex* Vertex::default_instance_ = NULL;

Vertex* Vertex::New() const {
  return new Vertex;
}

void Vertex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fake_ = false;
    degreesoffreedom_ = 0u;
    z_position_ = 0;
    rho_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_fake = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fake_)));
          set_has_is_fake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_degreesOfFreedom;
        break;
      }
      
      // required uint32 degreesOfFreedom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degreesOfFreedom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degreesoffreedom_)));
          set_has_degreesoffreedom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z_position;
        break;
      }
      
      // required double z_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_position_)));
          set_has_z_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_rho;
        break;
      }
      
      // required double rho = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
          set_has_rho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_fake = 1;
  if (has_is_fake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_fake(), output);
  }
  
  // required uint32 degreesOfFreedom = 2;
  if (has_degreesoffreedom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->degreesoffreedom(), output);
  }
  
  // required double z_position = 3;
  if (has_z_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z_position(), output);
  }
  
  // required double rho = 4;
  if (has_rho()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rho(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_fake = 1;
  if (has_is_fake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_fake(), target);
  }
  
  // required uint32 degreesOfFreedom = 2;
  if (has_degreesoffreedom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->degreesoffreedom(), target);
  }
  
  // required double z_position = 3;
  if (has_z_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z_position(), target);
  }
  
  // required double rho = 4;
  if (has_rho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rho(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vertex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_fake = 1;
    if (has_is_fake()) {
      total_size += 1 + 1;
    }
    
    // required uint32 degreesOfFreedom = 2;
    if (has_degreesoffreedom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degreesoffreedom());
    }
    
    // required double z_position = 3;
    if (has_z_position()) {
      total_size += 1 + 8;
    }
    
    // required double rho = 4;
    if (has_rho()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fake()) {
      set_is_fake(from.is_fake());
    }
    if (from.has_degreesoffreedom()) {
      set_degreesoffreedom(from.degreesoffreedom());
    }
    if (from.has_z_position()) {
      set_z_position(from.z_position());
    }
    if (from.has_rho()) {
      set_rho(from.rho());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Vertex::Swap(Vertex* other) {
  if (other != this) {
    std::swap(is_fake_, other->is_fake_);
    std::swap(degreesoffreedom_, other->degreesoffreedom_);
    std::swap(z_position_, other->z_position_);
    std::swap(rho_, other->rho_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex_descriptor_;
  metadata.reflection = Vertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kRunFieldNumber;
const int Event::kLumiFieldNumber;
const int Event::kNumberFieldNumber;
const int Event::kJetsFieldNumber;
const int Event::kElectronsFieldNumber;
const int Event::kMetFieldNumber;
const int Event::kVerticesFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  met_ = const_cast< ::HEP::MET*>(&::HEP::MET::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  run_ = 0u;
  lumi_ = 0u;
  number_ = 0u;
  met_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete met_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    run_ = 0u;
    lumi_ = 0u;
    number_ = 0u;
    if (has_met()) {
      if (met_ != NULL) met_->::HEP::MET::Clear();
    }
  }
  jets_.Clear();
  electrons_.Clear();
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 run = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_)));
          set_has_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lumi;
        break;
      }
      
      // required uint32 lumi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lumi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lumi_)));
          set_has_lumi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // optional uint32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jets;
        break;
      }
      
      // repeated .HEP.Jet jets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jets;
        if (input->ExpectTag(42)) goto parse_electrons;
        break;
      }
      
      // repeated .HEP.Electron electrons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_electrons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_electrons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_electrons;
        if (input->ExpectTag(50)) goto parse_met;
        break;
      }
      
      // required .HEP.MET met = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_met:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_met()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vertices;
        break;
      }
      
      // repeated .HEP.Vertex vertices = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vertices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 run = 1;
  if (has_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->run(), output);
  }
  
  // required uint32 lumi = 2;
  if (has_lumi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lumi(), output);
  }
  
  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }
  
  // repeated .HEP.Jet jets = 4;
  for (int i = 0; i < this->jets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jets(i), output);
  }
  
  // repeated .HEP.Electron electrons = 5;
  for (int i = 0; i < this->electrons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->electrons(i), output);
  }
  
  // required .HEP.MET met = 6;
  if (has_met()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->met(), output);
  }
  
  // repeated .HEP.Vertex vertices = 7;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vertices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 run = 1;
  if (has_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->run(), target);
  }
  
  // required uint32 lumi = 2;
  if (has_lumi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lumi(), target);
  }
  
  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }
  
  // repeated .HEP.Jet jets = 4;
  for (int i = 0; i < this->jets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jets(i), target);
  }
  
  // repeated .HEP.Electron electrons = 5;
  for (int i = 0; i < this->electrons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->electrons(i), target);
  }
  
  // required .HEP.MET met = 6;
  if (has_met()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->met(), target);
  }
  
  // repeated .HEP.Vertex vertices = 7;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vertices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 run = 1;
    if (has_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run());
    }
    
    // required uint32 lumi = 2;
    if (has_lumi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lumi());
    }
    
    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
    // required .HEP.MET met = 6;
    if (has_met()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->met());
    }
    
  }
  // repeated .HEP.Jet jets = 4;
  total_size += 1 * this->jets_size();
  for (int i = 0; i < this->jets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jets(i));
  }
  
  // repeated .HEP.Electron electrons = 5;
  total_size += 1 * this->electrons_size();
  for (int i = 0; i < this->electrons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->electrons(i));
  }
  
  // repeated .HEP.Vertex vertices = 7;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  jets_.MergeFrom(from.jets_);
  electrons_.MergeFrom(from.electrons_);
  vertices_.MergeFrom(from.vertices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_run()) {
      set_run(from.run());
    }
    if (from.has_lumi()) {
      set_lumi(from.lumi());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_met()) {
      mutable_met()->::HEP::MET::MergeFrom(from.met());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  for (int i = 0; i < jets_size(); i++) {
    if (!this->jets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < electrons_size(); i++) {
    if (!this->electrons(i).IsInitialized()) return false;
  }
  if (has_met()) {
    if (!this->met().IsInitialized()) return false;
  }
  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(run_, other->run_);
    std::swap(lumi_, other->lumi_);
    std::swap(number_, other->number_);
    jets_.Swap(&other->jets_);
    electrons_.Swap(&other->electrons_);
    std::swap(met_, other->met_);
    vertices_.Swap(&other->vertices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventCollection::kEventFieldNumber;
#endif  // !_MSC_VER

EventCollection::EventCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventCollection::InitAsDefaultInstance() {
}

EventCollection::EventCollection(const EventCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventCollection::~EventCollection() {
  SharedDtor();
}

void EventCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventCollection_descriptor_;
}

const EventCollection& EventCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

EventCollection* EventCollection::default_instance_ = NULL;

EventCollection* EventCollection::New() const {
  return new EventCollection;
}

void EventCollection::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEP.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEP.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEP.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventCollection::ByteSize() const {
  int total_size = 0;
  
  // repeated .HEP.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventCollection::MergeFrom(const EventCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventCollection::CopyFrom(const EventCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCollection::IsInitialized() const {
  
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  return true;
}

void EventCollection::Swap(EventCollection* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventCollection_descriptor_;
  metadata.reflection = EventCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HEP

// @@protoc_insertion_point(global_scope)
