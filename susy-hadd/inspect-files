#!/usr/bin/env python
from __future__ import print_function, division
'''
test how much the files have in common
tests two approaches:
 1) include common parent directories (Unique path fraction) excluding /
 2) count unique end-path object (what actually gets merged)
'''
import os

DEBUG=os.environ.get('DEBUG', False)

from time_function import time_function

@time_function('main')
def main(files):
    paths, objects = get_paths_and_objects(files)
    summary = calculate_unique_fraction(paths)
    print()
    print('Summary paths')
    print('Total # of paths', summary['n_things'])
    print('Common # of paths', summary['n_common_things'])
    print('Unique # of paths', summary['n_unique_things'])
    print('Unique path fraction: {:.2f} %'.format(summary['unique_fraction']))
    print()
    common_paths = summary['common_things']
    if common_paths:
        print("Common paths:")
        all_files = set(files)
        for p in common_paths:
            in_files = set([f for f,f_paths in paths.iteritems() if p in f_paths])
            if in_files == all_files:
                in_files = 'all'
            else:
                in_files = ','.join(in_files)
            print('    ', p, 'in files:', in_files)
        print()

    summary = calculate_unique_fraction(objects)
    print()
    print('Summary objects')
    print('Total # of objects', summary['n_things'])
    print('Common # of objects', summary['n_common_things'])
    print('Unique # of objects', summary['n_unique_things'])
    print('Unique objects fraction: {:.2f} %'.format(summary['unique_fraction']))
    print()

@time_function('get_paths_and_objects')
def get_paths_and_objects(files):
    from rootpy.io import root_open
    paths = {}
    f_objects = {}

    for file_name in files:
        paths[file_name] = []
        f_objects[file_name] = []
        add_path = paths[file_name].append
        add_objects = f_objects[file_name].append
        with root_open(file_name) as f:
            if DEBUG: print('Opened file', file_name)
            for path, dirs, objects in f.walk():
                if not path == '':
                    add_path(path)
                for o in objects:
                    add_objects('{0}/{1}'.format(path, o))
                #print(path, dirs, objects)
        if DEBUG: print('Closed file', file_name)
    return paths, f_objects

@time_function('calculate_unique_fraction')
def calculate_unique_fraction(things):
    '''
        Returns the fraction of unique things
    '''
    from itertools import chain
    import collections
    summary = {
        'unique_fraction': 0,
        'n_unique_things': 0,
        'n_things': 0,
        'n_common_things': 0,
        'common_things': [],
    }

    if len(things.keys())==1:
        summary['unique_fraction'] = 100
        summary['common_things'] = things
        return summary

    all_things = list(chain(*things.values()))
    unique_things = set(all_things)
    n_unique_things = len(unique_things)
    n_things = len(all_things)
    n_common_things = n_things - n_unique_things

    if n_things > 0:
        summary['unique_fraction'] = 100*(n_common_things/n_things)

    summary['n_common_things'] = n_common_things
    summary['n_things'] = n_things
    summary['n_unique_things'] = n_unique_things
    summary['common_things'] = [item for item, count in collections.Counter(all_things).items() if count > 1]
    return summary


if __name__ == '__main__':
    import sys

    files = sys.argv[1:]
    main(files)
